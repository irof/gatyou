/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.irof.sparrow;

import java.io.*;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.StringJoiner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Logger;

public class App {
    private static final Logger log = Logger.getLogger("SimpleServerApp");

    public static void main(String... args) {
        System.setProperty("java.util.logging.SimpleFormatter.format",
                "%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL [%4$s] [%2$s] %5$s%6$s%n");

        int port = Integer.parseInt(System.getProperty("server.port", "8080"));
        int requestHandlerSize = Optional.ofNullable(System.getenv("REQUEST_HANDLER_SIZE")).map(Integer::parseInt).orElse(3);

        log.info("server.port=%d, requestHandlerSize=%d".formatted(port, requestHandlerSize));

        ExecutorService executorService = Executors.newFixedThreadPool(requestHandlerSize);
        try (Closeable c = executorService::shutdown;
             ServerSocket serverSocket = new ServerSocket()) {
            serverSocket.setReuseAddress(true);

            serverSocket.bind(new InetSocketAddress("0.0.0.0", port));

            log.info("Server Started: %s".formatted(serverSocket.getLocalSocketAddress()));

            while (!serverSocket.isClosed()) {
                Socket socket = serverSocket.accept();
                executorService.execute(() -> {
                    long startMillis = System.currentTimeMillis();
                    log.info("[%s] accepted socket from %s".formatted(Thread.currentThread(), socket.getRemoteSocketAddress()));
                    try (Socket socketForClose = socket;
                         OutputStream outputStream = socket.getOutputStream();
                         BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(outputStream, StandardCharsets.UTF_8))) {

                        String content = LocalDateTime.now().toString();
                        log.info("response content: <%s>".formatted(content));

                        String httpResponse = new StringJoiner("\r\n")
                                .add("HTTP/1.1 200 OK")
                                .add("content-type: text/plain; charset=utf-8")
                                .add("content-length: " + content.length())
                                .add("")
                                .add(content)
                                .toString();
                        writer.write(httpResponse);
                        writer.flush();
                        log.info("taken time: %dms".formatted(System.currentTimeMillis() - startMillis));
                    } catch (IOException e) {
                        // 例外処理ちゃんとしなきゃ
                        throw new UncheckedIOException(e);
                    }
                });
            }
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }
}
